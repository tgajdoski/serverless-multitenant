import { Component, OnInit,  ElementRef, Renderer, ViewChild } from '@angular/core';
import { ToastyService, ToastyConfig, ToastOptions } from 'ng2-toasty';

import { Router } from '@angular/router';
import { CognitoService } from '../../core/cognito.service';
import { AuthenticationCheckService } from '../../core/authentication-check.service';
import { UtilFunctionsService } from '../../core/util-functions.service';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent implements OnInit {
  username: string;
  generatedUsername: string;
  password: string;
  errorMessage: string;
  resetPassword: boolean;
  cognitoUser: any;
  newPassword: string;
  logging: boolean;
  @ViewChild('myButt') button: ElementRef;

  constructor(private router: Router, private cognitoService: CognitoService,
                private authCheckService: AuthenticationCheckService, private utilFunctions: UtilFunctionsService,
                private renderer: Renderer, private toastyService: ToastyService, private toastyConfig: ToastyConfig) {
      this.toastyConfig.showClose = false;
      this.toastyConfig.theme = 'bootstrap';
      this.toastyConfig.timeout = 4000;
      this.toastyConfig.position = 'top-center';
  }

  ngOnInit() {
    this.errorMessage = null;
    this.logging = false;
    this.resetPassword = false;
    this.newPassword = '';
    this.authCheckService.tenantName = '';
    this.generatedUsername = null;
  }

  cancelChangePassword() {
    this.resetPassword = false;
    this.cognitoService.logout();
  }

  evaluateLoginPromise(promise: Promise<any>) {
    // The parameter is a promise for a log-in in the cognito user pool.
    // Once they are logged in, we need to handle initialization
    // and in case the authentication is unsuccessful we need to handle that too
    this.errorMessage = null;
    this.logging = true;
    this.renderer.invokeElementMethod(this.button.nativeElement, 'focus');
    promise.then(
       (result) => {
          this.errorMessage = null;
          console.log('evaluate login promise result:');
          console.log(JSON.stringify(result, null, 2));
          return this.authCheckService.initBasedOnCognitoToken();
    }).then(
      () => {
        const redUrl = this.authCheckService.redirectUrl;
        if (redUrl && redUrl !== '/login') {
          this.router.navigateByUrl(redUrl);
        } else {
          this.router.navigate(['/feat']);
        }
      }
    ).catch(
      (error) => {
        console.log(error);
        this.logging = false;
        this.errorMessage = error.message;

        const toastOptions: ToastOptions = {
            title: 'Whoops!',
            msg: this.errorMessage
        };
        console.log('result: ' + error);
        if (error.code === 'UserNotConfirmedException') {
          console.log('User Not Confirmed');
          this.router.navigate(['/confirm', this.generatedUsername ? this.generatedUsername : this.username]);
        } else if (error.code === 'PasswordChangeRequiredException') {
          this.toastyService.error(toastOptions);
          this.resetPassword = true;
          this.cognitoUser = error.user;
        } else if (error.code === 'PasswordResetRequiredException') {
          // TODO: Need to handle this as a part of the admin created users workflow
          this.toastyService.error(toastOptions);
          console.log('Password Reset Required');
        } else if (error.code === 'NotAuthorizedException') {
          this.toastyService.error(toastOptions);
          console.log('User Not Authorized');
        } else if (error.code === 'ResourceNotFoundException') {
          this.toastyService.error(toastOptions);
          console.log('Resource Not Found');
        } else if (error.code === 'UserNotFoundException') {
          console.log('User Not Found');
          // FIXME: Amazon Cognito Identity doesn't throw UserNotConfirmedExeption when using an alias
          // (and we actually do use an alias, as we ask for the email, instead of the autogenerated username)
          // https://github.com/aws/amazon-cognito-identity-js/issues/147?_pjax=%23js-repo-pjax-container
          // for now , do another attempt with the automatically generated username...
          const altUsername = this.utilFunctions.defaultUsernameForEmail(this.username);
          if (this.generatedUsername) {
            this.generatedUsername = null;
            this.toastyService.error(toastOptions);
          } else {
            this.generatedUsername = altUsername;
            this.evaluateLoginPromise(this.cognitoService.authenticate(altUsername, this.password));
          }
        } else {
            // Unknown
        }
      }
    );
  }

  login() {
    this.logging = false;
    this.toastyService.clearAll();
    this.errorMessage = null;
    this.generatedUsername = null;
    console.debug('Username: %s', this.username);
    console.debug('Password: %s', this.password);
    setTimeout(() => {
      if (this.username == null || this.password == null) {
        this.errorMessage = 'All fields are required';
        const toastOptions: ToastOptions = {
              title: 'Whoops!',
              msg: this.errorMessage
          };
        this.toastyService.error(toastOptions);
        return;
      }
      // logout any user that was currently logged in
      if (this.cognitoService.getCurrentUser()) {
        this.cognitoService.logout();
      }
      this.evaluateLoginPromise(this.cognitoService.authenticate(this.username, this.password));
    }, 10);

  }

  setNewPassword() {
    this.evaluateLoginPromise(this.cognitoService.adminCreatedUserSetPassword(this.cognitoUser, this.newPassword));
  }
}
